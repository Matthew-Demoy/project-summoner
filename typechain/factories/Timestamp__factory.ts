/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Timestamp, TimestampInterface } from "../Timestamp";

const _abi = [
  {
    inputs: [],
    name: "getTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060b58061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063188ec35614602d575b600080fd5b60336047565b604051603e9190605c565b60405180910390f35b600042905090565b6056816075565b82525050565b6000602082019050606f6000830184604f565b92915050565b600081905091905056fea26469706673582212204de76773a66afb929e66f35716fda89190ca8954153c0d1a41d502a657a81eb064736f6c63430008070033";

export class Timestamp__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Timestamp> {
    return super.deploy(overrides || {}) as Promise<Timestamp>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Timestamp {
    return super.attach(address) as Timestamp;
  }
  connect(signer: Signer): Timestamp__factory {
    return super.connect(signer) as Timestamp__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TimestampInterface {
    return new utils.Interface(_abi) as TimestampInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Timestamp {
    return new Contract(address, _abi, signerOrProvider) as Timestamp;
  }
}
