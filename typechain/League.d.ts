/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LeagueInterface extends ethers.utils.Interface {
  functions: {
    "_createGame(uint256[],uint256[],uint8)": FunctionFragment;
    "_random()": FunctionFragment;
    "_startGame(uint256[],uint256[],bytes32)": FunctionFragment;
    "cooldowns(uint256)": FunctionFragment;
    "createGame(uint256[],uint256[],uint8)": FunctionFragment;
    "matches(bytes32)": FunctionFragment;
    "rm()": FunctionFragment;
    "rmAttributes()": FunctionFragment;
    "setStartingPosition(uint256,uint256,uint256)": FunctionFragment;
    "takeAction(uint256,tuple[],uint256,tuple[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_createGame",
    values: [BigNumberish[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "_random", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_startGame",
    values: [BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cooldowns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createGame",
    values: [BigNumberish[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "matches", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "rm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rmAttributes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setStartingPosition",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "takeAction",
    values: [
      BigNumberish,
      { x: BigNumberish; y: BigNumberish }[],
      BigNumberish,
      { x: BigNumberish; y: BigNumberish }[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "_createGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_random", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_startGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cooldowns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "matches", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rmAttributes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStartingPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "takeAction", data: BytesLike): Result;

  events: {
    "createGameEvent(address,bytes32,uint256[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "createGameEvent"): EventFragment;
}

export type createGameEventEvent = TypedEvent<
  [string, string, BigNumber[], BigNumber[]] & {
    sender: string;
    gameId: string;
    teamOne: BigNumber[];
    teamTwo: BigNumber[];
  }
>;

export class League extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LeagueInterface;

  functions: {
    _createGame(
      teamOne: BigNumberish[],
      teamTwo: BigNumberish[],
      mapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _random(overrides?: CallOverrides): Promise<[string]>;

    _startGame(
      teamOne: BigNumberish[],
      teamTwo: BigNumberish[],
      gameId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cooldowns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createGame(
      teamOne: BigNumberish[],
      teamTwo: BigNumberish[],
      mapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    matches(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number] & { mapId: number }>;

    rm(overrides?: CallOverrides): Promise<[string]>;

    rmAttributes(overrides?: CallOverrides): Promise<[string]>;

    setStartingPosition(
      x: BigNumberish,
      y: BigNumberish,
      summonerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    takeAction(
      summonerId: BigNumberish,
      preMoves: { x: BigNumberish; y: BigNumberish }[],
      action: BigNumberish,
      postMoves: { x: BigNumberish; y: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _createGame(
    teamOne: BigNumberish[],
    teamTwo: BigNumberish[],
    mapId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _random(overrides?: CallOverrides): Promise<string>;

  _startGame(
    teamOne: BigNumberish[],
    teamTwo: BigNumberish[],
    gameId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cooldowns(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  createGame(
    teamOne: BigNumberish[],
    teamTwo: BigNumberish[],
    mapId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  matches(arg0: BytesLike, overrides?: CallOverrides): Promise<number>;

  rm(overrides?: CallOverrides): Promise<string>;

  rmAttributes(overrides?: CallOverrides): Promise<string>;

  setStartingPosition(
    x: BigNumberish,
    y: BigNumberish,
    summonerId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  takeAction(
    summonerId: BigNumberish,
    preMoves: { x: BigNumberish; y: BigNumberish }[],
    action: BigNumberish,
    postMoves: { x: BigNumberish; y: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _createGame(
      teamOne: BigNumberish[],
      teamTwo: BigNumberish[],
      mapId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    _random(overrides?: CallOverrides): Promise<string>;

    _startGame(
      teamOne: BigNumberish[],
      teamTwo: BigNumberish[],
      gameId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    cooldowns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createGame(
      teamOne: BigNumberish[],
      teamTwo: BigNumberish[],
      mapId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    matches(arg0: BytesLike, overrides?: CallOverrides): Promise<number>;

    rm(overrides?: CallOverrides): Promise<string>;

    rmAttributes(overrides?: CallOverrides): Promise<string>;

    setStartingPosition(
      x: BigNumberish,
      y: BigNumberish,
      summonerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    takeAction(
      summonerId: BigNumberish,
      preMoves: { x: BigNumberish; y: BigNumberish }[],
      action: BigNumberish,
      postMoves: { x: BigNumberish; y: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "createGameEvent(address,bytes32,uint256[],uint256[])"(
      sender?: null,
      gameId?: null,
      teamOne?: null,
      teamTwo?: null
    ): TypedEventFilter<
      [string, string, BigNumber[], BigNumber[]],
      {
        sender: string;
        gameId: string;
        teamOne: BigNumber[];
        teamTwo: BigNumber[];
      }
    >;

    createGameEvent(
      sender?: null,
      gameId?: null,
      teamOne?: null,
      teamTwo?: null
    ): TypedEventFilter<
      [string, string, BigNumber[], BigNumber[]],
      {
        sender: string;
        gameId: string;
        teamOne: BigNumber[];
        teamTwo: BigNumber[];
      }
    >;
  };

  estimateGas: {
    _createGame(
      teamOne: BigNumberish[],
      teamTwo: BigNumberish[],
      mapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _random(overrides?: CallOverrides): Promise<BigNumber>;

    _startGame(
      teamOne: BigNumberish[],
      teamTwo: BigNumberish[],
      gameId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cooldowns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createGame(
      teamOne: BigNumberish[],
      teamTwo: BigNumberish[],
      mapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    matches(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    rm(overrides?: CallOverrides): Promise<BigNumber>;

    rmAttributes(overrides?: CallOverrides): Promise<BigNumber>;

    setStartingPosition(
      x: BigNumberish,
      y: BigNumberish,
      summonerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    takeAction(
      summonerId: BigNumberish,
      preMoves: { x: BigNumberish; y: BigNumberish }[],
      action: BigNumberish,
      postMoves: { x: BigNumberish; y: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _createGame(
      teamOne: BigNumberish[],
      teamTwo: BigNumberish[],
      mapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _random(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _startGame(
      teamOne: BigNumberish[],
      teamTwo: BigNumberish[],
      gameId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cooldowns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createGame(
      teamOne: BigNumberish[],
      teamTwo: BigNumberish[],
      mapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    matches(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rmAttributes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setStartingPosition(
      x: BigNumberish,
      y: BigNumberish,
      summonerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    takeAction(
      summonerId: BigNumberish,
      preMoves: { x: BigNumberish; y: BigNumberish }[],
      action: BigNumberish,
      postMoves: { x: BigNumberish; y: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
