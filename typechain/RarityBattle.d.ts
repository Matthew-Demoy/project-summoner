/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RarityBattleInterface extends ethers.utils.Interface {
  functions: {
    "SUMMONER_ID()": FunctionFragment;
    "allowance(uint256,uint256)": FunctionFragment;
    "approve(uint256,uint256,uint256)": FunctionFragment;
    "balanceOf(uint256)": FunctionFragment;
    "bet()": FunctionFragment;
    "bonusBalance(address)": FunctionFragment;
    "bonusPool()": FunctionFragment;
    "buy(uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "ethRatio()": FunctionFragment;
    "exchange(uint256,uint256)": FunctionFragment;
    "fight(uint256)": FunctionFragment;
    "fightTimes(uint256)": FunctionFragment;
    "freeTimes()": FunctionFragment;
    "heroPool(uint256)": FunctionFragment;
    "maxHeros()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "payOwner(address,uint256)": FunctionFragment;
    "pvp(uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBet(uint256)": FunctionFragment;
    "setEthRatio(uint256)": FunctionFragment;
    "setTicketPrice(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "ticketPrice()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(uint256,uint256,uint256)": FunctionFragment;
    "transferFrom(uint256,uint256,uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "SUMMONER_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bonusBalance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "bonusPool", values?: undefined): string;
  encodeFunctionData(functionFragment: "buy", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "ethRatio", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exchange",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fight", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "fightTimes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "freeTimes", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "heroPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "maxHeros", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payOwner",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pvp",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEthRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTicketPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ticketPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "SUMMONER_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bonusBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bonusPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ethRatio", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fight", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fightTimes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "freeTimes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "heroPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxHeros", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pvp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEthRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTicketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ticketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(uint256,uint256,uint256)": EventFragment;
    "Battle(uint256,uint256,uint256,bool)": EventFragment;
    "BuyRB(uint256,uint256,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetBet(uint256)": EventFragment;
    "SetEthRatio(uint256)": EventFragment;
    "SetTicketPrice(uint256)": EventFragment;
    "Transfer(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Battle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyRB"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetEthRatio"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTicketPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    from: BigNumber;
    to: BigNumber;
    amount: BigNumber;
  }
>;

export type BattleEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, boolean] & {
    from: BigNumber;
    to: BigNumber;
    level: BigNumber;
    result: boolean;
  }
>;

export type BuyRBEvent = TypedEvent<
  [BigNumber, BigNumber, boolean] & {
    from: BigNumber;
    amount: BigNumber;
    useGold: boolean;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SetBetEvent = TypedEvent<[BigNumber] & { bet: BigNumber }>;

export type SetEthRatioEvent = TypedEvent<[BigNumber] & { ratio: BigNumber }>;

export type SetTicketPriceEvent = TypedEvent<
  [BigNumber] & { ticketPrice: BigNumber }
>;

export type TransferEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    from: BigNumber;
    to: BigNumber;
    amount: BigNumber;
  }
>;

export class RarityBattle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RarityBattleInterface;

  functions: {
    SUMMONER_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      from: BigNumberish,
      spender: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bet(overrides?: CallOverrides): Promise<[BigNumber]>;

    bonusBalance(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bonusPool(overrides?: CallOverrides): Promise<[BigNumber]>;

    buy(
      _summoner: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    ethRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    exchange(
      _summoner: BigNumberish,
      _gold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fight(
      _summoner: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fightTimes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        times: BigNumber;
        win: BigNumber;
        loose: BigNumber;
        combo_win: BigNumber;
        combo_loose: BigNumber;
      }
    >;

    freeTimes(overrides?: CallOverrides): Promise<[BigNumber]>;

    heroPool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxHeros(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payOwner(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pvp(
      _summoner: BigNumberish,
      _opponent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBet(
      _bet: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEthRatio(
      _ethRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTicketPrice(
      _ticketPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    ticketPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      from: BigNumberish,
      to: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      executor: BigNumberish,
      from: BigNumberish,
      to: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  SUMMONER_ID(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    from: BigNumberish,
    spender: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  bet(overrides?: CallOverrides): Promise<BigNumber>;

  bonusBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  bonusPool(overrides?: CallOverrides): Promise<BigNumber>;

  buy(
    _summoner: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  ethRatio(overrides?: CallOverrides): Promise<BigNumber>;

  exchange(
    _summoner: BigNumberish,
    _gold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fight(
    _summoner: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fightTimes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      times: BigNumber;
      win: BigNumber;
      loose: BigNumber;
      combo_win: BigNumber;
      combo_loose: BigNumber;
    }
  >;

  freeTimes(overrides?: CallOverrides): Promise<BigNumber>;

  heroPool(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  maxHeros(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  payOwner(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pvp(
    _summoner: BigNumberish,
    _opponent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBet(
    _bet: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEthRatio(
    _ethRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTicketPrice(
    _ticketPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  ticketPrice(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    from: BigNumberish,
    to: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    executor: BigNumberish,
    from: BigNumberish,
    to: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    SUMMONER_ID(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      from: BigNumberish,
      spender: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bet(overrides?: CallOverrides): Promise<BigNumber>;

    bonusBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bonusPool(overrides?: CallOverrides): Promise<BigNumber>;

    buy(_summoner: BigNumberish, overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    ethRatio(overrides?: CallOverrides): Promise<BigNumber>;

    exchange(
      _summoner: BigNumberish,
      _gold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fight(_summoner: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    fightTimes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        times: BigNumber;
        win: BigNumber;
        loose: BigNumber;
        combo_win: BigNumber;
        combo_loose: BigNumber;
      }
    >;

    freeTimes(overrides?: CallOverrides): Promise<BigNumber>;

    heroPool(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    maxHeros(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    payOwner(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pvp(
      _summoner: BigNumberish,
      _opponent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBet(_bet: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setEthRatio(
      _ethRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTicketPrice(
      _ticketPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    ticketPrice(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      from: BigNumberish,
      to: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      executor: BigNumberish,
      from: BigNumberish,
      to: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(uint256,uint256,uint256)"(
      from?: BigNumberish | null,
      to?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { from: BigNumber; to: BigNumber; amount: BigNumber }
    >;

    Approval(
      from?: BigNumberish | null,
      to?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { from: BigNumber; to: BigNumber; amount: BigNumber }
    >;

    "Battle(uint256,uint256,uint256,bool)"(
      from?: BigNumberish | null,
      to?: BigNumberish | null,
      level?: null,
      result?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, boolean],
      { from: BigNumber; to: BigNumber; level: BigNumber; result: boolean }
    >;

    Battle(
      from?: BigNumberish | null,
      to?: BigNumberish | null,
      level?: null,
      result?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, boolean],
      { from: BigNumber; to: BigNumber; level: BigNumber; result: boolean }
    >;

    "BuyRB(uint256,uint256,bool)"(
      from?: BigNumberish | null,
      amount?: null,
      useGold?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, boolean],
      { from: BigNumber; amount: BigNumber; useGold: boolean }
    >;

    BuyRB(
      from?: BigNumberish | null,
      amount?: null,
      useGold?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, boolean],
      { from: BigNumber; amount: BigNumber; useGold: boolean }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SetBet(uint256)"(
      bet?: null
    ): TypedEventFilter<[BigNumber], { bet: BigNumber }>;

    SetBet(bet?: null): TypedEventFilter<[BigNumber], { bet: BigNumber }>;

    "SetEthRatio(uint256)"(
      ratio?: null
    ): TypedEventFilter<[BigNumber], { ratio: BigNumber }>;

    SetEthRatio(
      ratio?: null
    ): TypedEventFilter<[BigNumber], { ratio: BigNumber }>;

    "SetTicketPrice(uint256)"(
      ticketPrice?: null
    ): TypedEventFilter<[BigNumber], { ticketPrice: BigNumber }>;

    SetTicketPrice(
      ticketPrice?: null
    ): TypedEventFilter<[BigNumber], { ticketPrice: BigNumber }>;

    "Transfer(uint256,uint256,uint256)"(
      from?: BigNumberish | null,
      to?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { from: BigNumber; to: BigNumber; amount: BigNumber }
    >;

    Transfer(
      from?: BigNumberish | null,
      to?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { from: BigNumber; to: BigNumber; amount: BigNumber }
    >;
  };

  estimateGas: {
    SUMMONER_ID(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      from: BigNumberish,
      spender: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bet(overrides?: CallOverrides): Promise<BigNumber>;

    bonusBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bonusPool(overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      _summoner: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    ethRatio(overrides?: CallOverrides): Promise<BigNumber>;

    exchange(
      _summoner: BigNumberish,
      _gold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fight(
      _summoner: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fightTimes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    freeTimes(overrides?: CallOverrides): Promise<BigNumber>;

    heroPool(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    maxHeros(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payOwner(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pvp(
      _summoner: BigNumberish,
      _opponent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBet(
      _bet: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEthRatio(
      _ethRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTicketPrice(
      _ticketPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    ticketPrice(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      from: BigNumberish,
      to: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      executor: BigNumberish,
      from: BigNumberish,
      to: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SUMMONER_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      from: BigNumberish,
      spender: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bonusBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bonusPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buy(
      _summoner: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchange(
      _summoner: BigNumberish,
      _gold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fight(
      _summoner: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fightTimes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    freeTimes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    heroPool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxHeros(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payOwner(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pvp(
      _summoner: BigNumberish,
      _opponent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBet(
      _bet: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEthRatio(
      _ethRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTicketPrice(
      _ticketPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ticketPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      from: BigNumberish,
      to: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      executor: BigNumberish,
      from: BigNumberish,
      to: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
